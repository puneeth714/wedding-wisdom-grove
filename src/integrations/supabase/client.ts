// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// The types for TaskFeedback, TaskApproval, and ImageArtifacts are now nested within Database['public']['Tables'].
// The functions below are commented out because 'image_artifacts' is not recognized in Database['public']['Tables']
// in the generated types.ts. This indicates either the table is not in the public schema, or the types.ts
// generation is incomplete/incorrect for this table.
// Please verify the existence and schema of 'image_artifacts', 'task_feedback', and 'task_approvals' tables
// in your Supabase project and regenerate types if necessary.

const SUPABASE_URL = "https://lylsxoupakajkuisjdfl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx5bHN4b3VwYWthamt1aXNqZGZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzNjMyMzIsImV4cCI6MjA2MDkzOTIzMn0.IROcW1X2sHSbx9zOUsbxsN9TFoR6tyO0C8POlk2GCmo";
const SUPABASE_SERVICE_ROLE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY || SUPABASE_PUBLISHABLE_KEY; // Use Vite's environment variable support

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

/*
type TaskFeedback = Database['public']['Tables']['task_feedback']['Row'];
export async function insertTaskFeedback(feedback: Database['public']['Tables']['task_feedback']['Insert']): Promise<TaskFeedback[] | null> {
  const { data, error } = await supabase
    .from('task_feedback')
    .insert(feedback)
    .select();
  if (error) {
    console.error('Error inserting task feedback:', error);
    return null;
  }
  return data;
}

export async function fetchTaskFeedback(taskId: string): Promise<TaskFeedback[] | null> {
  const { data, error } = await supabase
    .from('task_feedback')
    .select('*')
    .eq('task_id', taskId);
  if (error) {
    console.error('Error fetching task feedback:', error);
    return null;
  }
  return data;
}

type TaskApproval = Database['public']['Tables']['task_approvals']['Row'];
export async function insertTaskApproval(approval: Database['public']['Tables']['task_approvals']['Insert']): Promise<TaskApproval[] | null> {
  const { data, error } = await supabase
    .from('task_approvals')
    .insert(approval)
    .select();
  if (error) {
    console.error('Error inserting task approval:', error);
    return null;
  }
  return data;
}

export async function updateTaskApproval(approvalId: string, updates: Database['public']['Tables']['task_approvals']['Update']): Promise<TaskApproval[] | null> {
  const { data, error } = await supabase
    .from('task_approvals')
    .update(updates)
    .eq('approval_id', approvalId)
    .select();
  if (error) {
    console.error('Error updating task approval:', error);
    return null;
  }
  return data;
}

export async function fetchTaskApprovals(taskId: string): Promise<TaskApproval[] | null> {
  const { data, error } = await supabase
    .from('task_approvals')
    .select('*')
    .eq('task_id', taskId);
  if (error) {
    console.error('Error fetching task approvals:', error);
    return null;
  }
  return data;
}

type ImageArtifacts = Database['public']['Tables']['image_artifacts']['Row'];
export async function insertImageArtifact(artifact: Database['public']['Tables']['image_artifacts']['Insert']): Promise<ImageArtifacts[] | null> {
  const { data, error } = await supabase
    .from('image_artifacts')
    .insert(artifact)
    .select();
  if (error) {
    console.error('Error inserting image artifact:', error);
    return null;
  }
  return data;
}

export async function fetchImageArtifactsByWeddingId(weddingId: string): Promise<ImageArtifacts[] | null> {
  const { data, error } = await supabase
    .from('image_artifacts')
    .select('*')
    .eq('wedding_id', weddingId);
  if (error) {
    console.error('Error fetching image artifacts by wedding ID:', error);
    return null;
  }
  return data;
}

export async function fetchImageArtifactById(artifactId: string): Promise<ImageArtifacts | null> {
  const { data, error } = await supabase
    .from('image_artifacts')
    .select('*')
    .eq('artifact_id', artifactId)
    .single();
  if (error) {
    console.error('Error fetching image artifact by ID:', error);
    return null;
  }
  return data;
}
*/