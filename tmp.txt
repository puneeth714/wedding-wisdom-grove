diff --git a/src/hooks/useAuthContext.tsx b/src/hooks/useAuthContext.tsx
index 94277b3..dd7d0e9 100644
--- a/src/hooks/useAuthContext.tsx
+++ b/src/hooks/useAuthContext.tsx
@@ -1,33 +1,29 @@
-
-import React, { createContext, useContext, useEffect, useState } from 'react';
-import { Session, User } from '@supabase/supabase-js';
-import { supabase } from '../integrations/supabase/client';
+import React, { createContext, useState, useEffect, useContext } from 'react';
 import { useNavigate } from 'react-router-dom';
-import { toast } from '@/components/ui/use-toast';
-
-// Define address and pricing range types
-export interface AddressData {
-  city: string;
-  state: string;
-  country: string;
-  full_address: string;
-}
+import { supabase } from '../integrations/supabase/client';
 
-export interface PricingRangeData {
-  min: string;
-  max: string;
-  currency: string;
-}
+import { User, Session } from '@supabase/supabase-js';
+import { toast } from '../components/ui/use-toast';
 
-export interface VendorDetailsData {
-  amenities?: string[];
-  services?: string[];
-  capacity?: number;
-  style?: string;
-  specializations?: string[];
-  policies?: string[];
-  ritual_offerings?: string[];
-}
+export type AddressData = {
+  street?: string;
+  city?: string;
+  state?: string;
+  zip?: string;
+  country?: string;
+};
+
+export type PricingRangeData = {
+  min?: number;
+  max?: number;
+  currency?: string;
+};
+
+export type VendorDetailsData = {
+  // Define properties based on actual usage or schema
+  // For now, using a generic object type
+  [key: string]: any;
+};
 
 export type VendorProfile = {
   vendor_id: string;
@@ -43,6 +39,7 @@ export type VendorProfile = {
   address?: AddressData;
   pricing_range?: PricingRangeData;
   details?: VendorDetailsData;
+  status?: string;
 }
 
 type StaffProfile = {
@@ -53,7 +50,7 @@ type StaffProfile = {
   phone_number?: string;
   role: string;
   is_active: boolean;
-  invitation_status: string;
+  invitation_status?: 'pending' | 'accepted' | 'rejected';
 }
 
 type AuthContextType = {
@@ -115,10 +112,11 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
           phone_number: data.phone_number || undefined,
           website_url: data.website_url || undefined,
           description: data.description || undefined,
-          portfolio_image_urls: data.portfolio_image_urls as string[] || [],
-          address: data.address as unknown as AddressData || undefined,
-          pricing_range: data.pricing_range as unknown as PricingRangeData || undefined,
-          details: data.details as unknown as VendorDetailsData || undefined
+          portfolio_image_urls: (data.portfolio_image_urls as string[]) || [],
+          address: (data.address as unknown as AddressData) || undefined,
+          pricing_range: (data.pricing_range as unknown as PricingRangeData) || undefined,
+          details: (data.details as unknown as VendorDetailsData) || undefined,
+          status: data.status || undefined,
         };
         
         if (JSON.stringify(profile) !== JSON.stringify(vendorProfile)) {
@@ -160,10 +158,11 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
           phone_number: data.phone_number || undefined,
           role: data.role || 'staff',
           is_active: data.is_active || false,
-          invitation_status: data.invitation_status || 'pending'
+          invitation_status: data.invitation_status as 'pending' | 'accepted' | 'rejected' || undefined,
         };
         
         setStaffProfile(profile);
+        setStaffProfile(profile);
       } else {
         setStaffProfile(null);
       }
@@ -207,14 +206,26 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
   useEffect(() => {
     const fetchUserRole = async () => {
       if (user) {
-        const { data } = await supabase.from('users').select('user_type').eq('supabase_auth_uid', user.id).single();
-        if (data) {
-          setUserType(data.user_type as 'vendor' | 'staff' | 'customer' | null);
-          if (data.user_type === 'vendor') {
-            await fetchVendorProfile(user.id);
-          } else if (data.user_type === 'staff') {
-            await fetchStaffProfile(user.id);
-          }
+        const { data: userProfile, error: userProfileError } = await supabase
+          .from('users')
+          .select('user_type')
+          .eq('supabase_auth_uid', user.id)
+          .single();
+
+        if (userProfileError) {
+          console.error('Error fetching user profile:', userProfileError);
+          setUserType('customer'); // Default to customer if profile fetch fails
+          return;
+        }
+
+        if (userProfile?.user_type === 'vendor_staff') {
+          setUserType('staff');
+          await fetchStaffProfile(user.id);
+        } else if (userProfile?.user_type === 'vendor') {
+          setUserType('vendor');
+          await fetchVendorProfile(user.id);
+        } else {
+          setUserType('customer');
         }
       }
     };
@@ -357,6 +368,7 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
                 contact_email: data.user.email,
                 phone_number: metadata.phone_number,
                 is_active: false,
+                status: 'onboarding_in_progress',
               })
               .select()
               .single();
@@ -437,6 +449,8 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
         description: error.message || "An error occurred during the update",
         variant: "destructive",
       });
+    } finally {
+      // No need to set isLoading to false here, as it's handled by the parent component
     }
   };
 
@@ -451,7 +465,7 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
           description: "You are already logged out.",
           variant: "destructive",
         });
-        navigate('/login');
+        await supabase.auth.signOut();
         return;
       }
 
@@ -473,10 +487,10 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
   };
 
   return (
-    <AuthContext.Provider value={{ 
-      user, 
-      session, 
-      isLoading, 
+    <AuthContext.Provider value={{
+      user,
+      session,
+      isLoading,
       vendorProfile,
       staffProfile,
       userType,
@@ -492,7 +506,7 @@ export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
       {children}
     </AuthContext.Provider>
   );
-};
+}
 
 export const useAuth = () => {
   const context = useContext(AuthContext);
@@ -500,4 +514,4 @@ export const useAuth = () => {
     throw new Error('useAuth must be used within an AuthProvider');
   }
   return context;
-};
+};
\ No newline at end of file
